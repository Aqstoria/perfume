// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String?
  role      UserRole @default(BUYER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders        Order[]
  auditLogs     AuditLog[]
  accessUrls    UserAccessUrl[]
  importHistory ImportHistory[]
  exportHistory ExportHistory[]
  importRollbacks ImportRollback[]

  @@map("users")
}

model Customer {
  id                 String   @id @default(cuid())
  name               String
  email              String?  @unique
  phone              String?
  address            String?
  generalMargin      Float    @default(0.0)
  minimumOrderValue  Float    @default(0.0)
  minimumOrderItems  Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  customerMargins      CustomerMargin[]
  customerPrices       CustomerPrice[]
  customerDiscounts    CustomerDiscount[]
  customerHiddenCategories CustomerHiddenCategory[]
  promotionCustomers   PromotionCustomer[]
  orders               Order[]

  @@map("customers")
}

enum UserRole {
  ADMIN
  BUYER
}

model Product {
  id                    String    @id @default(cuid())
  name                  String
  content               String?
  ean                   String    @unique
  purchasePrice         Float
  retailPrice           Float
  stockQuantity         Int
  maxOrderableQuantity  Int?
  starRating            Float?
  category              String?
  subcategory           String?
  brand                 String?
  weight                Float?
  dimensions            String?
  status                String    @default("ACTIVE")
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  images          ProductImage[]
  customerPrices  CustomerPrice[]
  orderItems      OrderItem[]
  reviews         Review[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  altText   String?
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model CustomerMargin {
  id         String   @id @default(cuid())
  customerId String
  category   String
  margin     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, category])
  @@map("customer_margins")
}

model CustomerPrice {
  id         String   @id @default(cuid())
  customerId String
  productId  String
  price      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([customerId, productId])
  @@map("customer_prices")
}

model CustomerDiscount {
  id         String   @id @default(cuid())
  customerId String
  category   String
  discount   Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, category])
  @@map("customer_discounts")
}

model CustomerHiddenCategory {
  id         String   @id @default(cuid())
  customerId String
  category   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, category])
  @@map("customer_hidden_categories")
}

model Promotion {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  discount    Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  promotionCustomers PromotionCustomer[]

  @@map("promotions")
}

model PromotionCustomer {
  id          String   @id @default(cuid())
  promotionId String
  customerId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  customer  Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([promotionId, customerId])
  @@map("promotion_customers")
}

model Order {
  id         String   @id @default(cuid())
  userId     String
  customerId String
  orderDate  DateTime @default(now())
  status     String   @default("PENDING")
  totalAmount Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  entity    String
  entityId  String
  timestamp DateTime @default(now())
  details   Json?

  user User @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model ImportHistory {
  id          String   @id @default(cuid())
  userId      String
  filename    String
  status      String
  importType  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  snapshotId  String?

  user User @relation(fields: [userId], references: [id])
  snapshot ImportSnapshot? @relation(fields: [snapshotId], references: [id])
  importRollbacks ImportRollback[]

  @@map("import_history")
}

model ImportSnapshot {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  data      Json // Store a snapshot of the database state or imported data
  importHistory ImportHistory[]
  rollbackHistory ImportRollback[]

  @@map("import_snapshots")
}

model ImportRollback {
  id         String   @id @default(cuid())
  importId   String
  snapshotId String
  userId     String
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  importHistory ImportHistory @relation(fields: [importId], references: [id])
  snapshot      ImportSnapshot @relation(fields: [snapshotId], references: [id])
  user          User @relation(fields: [userId], references: [id])

  @@map("import_rollbacks")
}

model ExportHistory {
  id         String   @id @default(cuid())
  userId     String
  filename   String
  status     String
  exportType String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("export_history")
}

model ExportTemplate {
  id        String   @id @default(cuid())
  name      String   @unique
  template  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("export_templates")
}

model UserAccessUrl {
  id        String   @id @default(cuid())
  userId    String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("user_access_urls")
}

model Review {
  id        String   @id @default(cuid())
  productId String
  rating    Int
  comment   String?
  author    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("reviews")
}